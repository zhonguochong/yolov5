# parameters
nc: 1  # number of classes
depth_multiple: 1.33  # model depth multiple
width_multiple: 1.25  # layer channel multiple

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8  检测小目标
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32 检测大目标

# YOLOv5 backbone
backbone:
  # [from, number, module, args] 输入来自哪一层， 模块数*depth, 模块名称， 模块参数【第一个是卷积核个数*width, 】
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2  3表示卷积核大小（3x3）， 步长默认为1
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4 2表示步长 这里的Conv由conv+Bn+Leaky_relu激活函数三者组成
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 9, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 1, SPP, [1024, [5, 9, 13]]],  # 采用1×1，5×5，9×9，13×13的最大池化的方式，进行多尺度融合
   [-1, 3, C3, [1024, False]],  # 9 False表示没有使用Res unint模块,直接使用了CBL
  ]

# YOLOv5 head include Neck and Prediction
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4 [-1, 6]cat上一层和第六层
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5) 代表输入的层数17，20，23
  ]
